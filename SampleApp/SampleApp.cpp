/**
 * @file SampleApp.cpp
 * @author Gustice
 * @brief
 * @version 0.1
 * @date 2019-09-18
 *
 * @copyright Copyright (c) 2019
 */

// https://www.reddit.com/r/cpp/comments/af74l1/recommendations_for_setting_up_a_modern_c_dev/
// https://codereview.stackexchange.com/questions/189489/cmake-project-template-for-a-general-cross-platform-c14-project

#include "Elements/ColorDemo.h"
#include "Elements/EffectDemo.h"
#include "Elements/MyUtils.h"
#include "Elements/StateMachineDemo.h"

void SampleApp(void);

/**
 * @brief   Demo usage of Lightning Library
 *
 * @details
 *
 * @param argc  Argument not used
 * @param argv  Argument list not used
 * @return int  Return Value not used
 */
int main(int argc, char const *argv[]) {
    PrintHeader("LightEffectFramework Sample Application");

    PrintChapter("Color Demo");
    //ColorDemo();

    PrintChapter("State-Machine Demo");
    //StateMachinDemo();

    PrintChapter("Effect-Processor Demo");
    //EffectProcessorDemo();

    PrintChapter("Sample-Application Demo");


    PrintFooter();
    /* code */
    return 0;
}


void SampleApp(void) {

}


/**
 * @file Cpp_Gnu_Template.cpp
 * @author Gustice
 * @brief
 * @date 2019-06-06
 *
 * @copyright Copyright (c) 2019
 *
 * @note Certain preconditions needs to be met:
 *      - Install MinGW form http://www.mingw.org/
 *          Don't forget to create environment variable
 *          You can check the correct installation by typing g++ --version in to command line
 *          See https://code.visualstudio.com/docs/cpp/config-mingw for further documentation
 *
 *      - c_cpp_properties.json can be generated by:
 *          - Ctrl+Shift+P
 *          - C/C++: Edit configurations
 *          - Generate c_cpp_properties.json from Cpp_Gnu_Template
 *          - get sure "intelliSenseMode" is set to "clang-x64",
 *            This sets IntelliSens to appropriate Compiler include files
 *
 *      - tasks.json can be generated by:
 *          - Tasks: Configure Tasks
 *          - Create from templates
 *          - Select: Other
 *      - Project can be built by Command
 *          - Tasks: Run Task
 *          - Select appropriate tasks
 *          - Hit Shortcut Ctrl-Shift-B alternatively
 *
 *      - launch.json can be generated by:
 *          - Open debugger view
 *          - Click on gear symbol for setup
 *          - Select C++ GDB/LLDB
 *          - Select default configuration
 *      - Debugger can be started
 *          - Debug: Select and Start Debugging
 *          - Select appropriate tasks
 *          - Hit Shortcut F5 alternatively
 *      - GDB-debug-commands can be used by prepending '-exec'
 *          - Example -exec info breakpoints
 *
 *      - .gitignore-file can be generated by command prompt in directory
 *          - type following command:
 *              nul>.gitignore
 *
 *      - .clang-format-file can be generated by command prompt in directory
 *          - type following command:
 *              clang-format -style=llvm -dump-config >.clang-format
 **************************************************************************************************/

/* Additional Hints */
// Ctrl+Shift+O   Search for Symbols in current file (Ctrl+P @)
// Ctrl+T         Search for Symbol in workspace (Ctrl+P #)