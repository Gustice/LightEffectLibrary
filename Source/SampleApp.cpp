/***********************************************************************************************//**
 * @file SampleApp.cpp
 * @author Gustice
 * @brief 
 * @version 0.1
 * @date 2019-09-18
 * 
 * @copyright Copyright (c) 2019
 **************************************************************************************************/

#include "SampleApp.h"
#include <string.h>
#include <stdio.h>


/// Demo Effect Macro
EffMacro_type eff_TestStdPulse[] = {
	{Light_Idle,	    (uint8_t*)0,		0,		32,         &color_ColdWhite,	0,          1},
	{Light_Wave,	    gau8_offsetPulse,	0xFF,	32,         USEOLD_COLOR,		0,          2},
	{Light_Idle,	    (uint8_t*)0,		0,		32,         USEOLD_COLOR,		0,          0},
};


/***********************************************************************************************//**
 * @brief   Demo usage of Lightning Library
 * 
 * @details
 * 
 * @param argc  Argument not used
 * @param argv  Argument list not used
 * @return int  Return Value not used
 **************************************************************************************************/
int main(int argc, char const *argv[])
{
    printf("Sample application running");

    Color r1;
    Color g1;
    Color b1;
    Color all1;

    r1.SetColor(0xFF, 0xFF, 0,0,0);
    g1.SetColor(0xFF, 0, 0xFF, 0,0);
    b1.SetColor(0xFF, 0, 0, 0xFF, 0);

    all1 = all1 + r1;
    all1 = all1 + g1;
    all1 = all1 + b1;


    /// Testing State machine
    EffectMemory Eff1;
    Eff1.SetEffect(eff_TestStdPulse);
    for(uint8_t i = 0; i < 96; i++)
    {
        Eff1.Tick();
    }

    EffectMemory Eff2;
    Eff2.SetEffect(eff_StdPulse);
    for(uint8_t i = 0; i < 96; i++)
    {
        Eff2.Tick();
    }



    /* code */
    return 0;
}





/***************************************************************************************************
 * @file Cpp_Gnu_Template.cpp
 * @author Gustice
 * @brief
 * @date 2019-06-06
 *
 * @copyright Copyright (c) 2019
 *
 * @note Certain preconditions needs to be met:
 *      - Install MinGW form http://www.mingw.org/
 *          Don't forget to create environment variable
 *          You can check the correct installation by typing g++ --version in to command line
 *          See https://code.visualstudio.com/docs/cpp/config-mingw for further documentation
 * 
 *      - c_cpp_properties.json can be generated by:
 *          - Ctrl+Shift+P 
 *          - C/C++: Edit configurations
 *          - Generate c_cpp_properties.json from Cpp_Gnu_Template
 *          - get sure "intelliSenseMode" is set to "clang-x64",
 *            This sets IntelliSens to appropriate Compiler include files
 * 
 *      - tasks.json can be generated by:
 *          - Tasks: Configure Tasks
 *          - Create from templates
 *          - Select: Other
 *      - Project can be built by Command
 *          - Tasks: Run Task
 *          - Select appropriate tasks
 *          - Hit Shortcut Ctrl-Shift-B alternatively
 * 
 *      - launch.json can be generated by:
 *          - Open debugger view
 *          - Click on gear symbol for setup
 *          - Select C++ GDB/LLDB
 *          - Select default configuration
 *      - Debugger can be started 
 *          - Debug: Select and Start Debugging
 *          - Select appropriate tasks
 *          - Hit Shortcut F5 alternatively
 *      - GDB-debug-commands can be used by prepending '-exec'
 *          - Example -exec info breakpoints
 * 
 *      - .gitignore-file can be generated by command prompt in directory
 *          - type following command:
 *              nul>.gitignore
 * 
 *      - .clang-format-file can be generated by command prompt in directory
 *          - type following command:
 *              clang-format -style=llvm -dump-config >.clang-format
 **************************************************************************************************/

/* Additional Hints */
// Ctrl+Shift+O   Search for Symbols in current file (Ctrl+P @)
// Ctrl+T         Search for Symbol in workspace (Ctrl+P #)