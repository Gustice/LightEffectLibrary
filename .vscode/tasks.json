{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        { // Build Project to manually degbug the SampleApp
            "label": "Manually: build Project",
            "type": "shell",
            "command": "g++",
            "args": [
                "-g", 
                "-o","LEL.exe",
                "Source/SampleApp.cpp",
                "Source/Modules/*.cpp",
                "-I", "Source/Modules", // Includes
                // "-L", "C:/Program Files/LLVM/lib7libclang.lib",// Library
            ],
            // Optional: 
            // Define this as default Task for Rund-Build-Task-Command -> Shortcut 
            "group": {
                "kind": "build",
                "isDefault": true
            },
            // Displays compiler errors in problems output
            "problemMatcher": "$gcc"
        },
        
        { // #1 PyBuild Source
            "label": "PyBased: build all Source-Parts",
            "type": "shell",
            "command": "py ",
            "args": [
                "${workspaceFolder}\\CompileSubProject.py",
                "Source",
                "-I Source -I Source\\Modules",
            ],
            "problemMatcher": "$gcc", // Otherwise its annoys you with warnings
        },
        { // #2 PyBuild Test-All
            "label": "PyBased: build all Test-Parts",
            "type": "shell",
            "command": "py ",
            "args": [
                "${workspaceFolder}\\CompileSubProject.py",
                "Tests,-In Source,-Ex Source\\SampleApp.cpp",
                "-I Source -I Source\\Modules -I Tests\\Include",
            ],
            "dependsOn": "PyBased: build all Source-Parts",
            "problemMatcher": "$gcc", // Otherwise its annoys you with warnings
        },
        { // #3 @todo Make it work again
            "label": "-notFunctional- PyBased: build Test-Parts without main",
            "type": "shell",
            "command": "py ",
            "args": [
                "${workspaceFolder}\\CompileSubProject.py",
                "Tests,-In Source,-Ex Source\\SampleApp.cpp",
                "-I Source -I Source\\Modules -I Tests\\Include",
            ],
            "dependsOn": "PyBased: build all Source-Parts",
            "problemMatcher": "$gcc", // Otherwise its annoys you with warnings
        },
        { // #4 Execute Tests
            "label": "PyBased: Execute Tests",
            "type": "shell",
            "command": "${workspaceFolder}\\Tests.exe",
            // "args": [
            //     "-h",  // for help output
            //     "-l",  // to list all tests and results
            // ],
            "problemMatcher": "$gcc",
            "dependsOn": [
                "build Test-Parts without main"
            ]
        },

        {
            "label": "CMake: Create Configuration",
            "type": "shell",
            "options": { 
                "cwd": "${workspaceFolder}/CMake"
            },
            "command": "CMake ..",
            "problemMatcher": "$gcc", // Otherwise its annoys you with warnings
        },
        {
            "label": "CMake: Build Project",
            "type": "shell",
            "options": {
                "cwd": "${workspaceFolder}/CMake"
            },
            "command": "CMake --build .",
            "dependsOn": "CMake: Create Configuration",
            "problemMatcher": "$gcc", // Otherwise its annoys you with warnings
        },
        {
            "label": "CMake: Run Test Project",
            "type": "shell",
            "options": {
                "cwd": "${workspaceFolder}/CMake"
            },
            "command": "Tests/Debug/tests.exe",
            "dependsOn": "CMake: Build Project",
            "problemMatcher": "$gcc", // Otherwise its annoys you with warnings
        },

        {
            "label": "Plot: Plot all the stuff",
            "type": "shell",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "command": "gnuplot",
            "args": [
                "--persist",
                "Source/GnuPlot.plt"
            ],
            "problemMatcher": "$gcc", // Otherwise its annoys you with warnings
        },

        {
            "label": "Doxygen: Create Docs",
            "type": "shell",
            "command": "C:\\Program Files\\doxygen\\bin\\doxygen.exe",
            "args": [
                "${workspaceFolder}\\Doc\\LEL.DoxyFile"
            ],
            "problemMatcher": "$gcc"
        }
    ]
}